FROM frolvlad/alpine-glibc

# Install required packages (Alpine uses apk instead of apt)
RUN apk update && apk add --no-cache \
    wget m4 make patch unzip bubblewrap git g++ \
    gtk+2.0-dev curl zsh sudo ocaml \
    python3 py3-virtualenv \
    camlp4 libxt libxt-dev \
    bash shadow

# Set up locale (Alpine doesn't use locale-gen, so use musl locales)
RUN apk add --no-cache musl-locales musl-locales-lang && \
    echo "en_US.UTF-8 UTF-8" > /etc/locales.conf && \
    export LANG=en_US.UTF-8

# Create a new user with UID 1001 and add to sudo group
RUN addgroup -g 1001 usergroup && \
    adduser -D -u 1000 -G usergroup -s /bin/zsh user && \
    echo 'user ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Switch to the new user
USER user
WORKDIR /build

# Install Lustre
ARG LUSTRE_VER="lustre-v4-IV.2024.144-linux64"
RUN wget "https://www-verimag.imag.fr/DIST-TOOLS/SYNCHRONE/lustre-v4/distrib/linux64/$LUSTRE_VER.tgz" -O lustre.tgz && \
    tar xvf lustre.tgz && \
    sudo cp -R $LUSTRE_VER /usr/local/
ENV LUSTRE_INSTALL=/usr/local/$LUSTRE_VER
RUN . $LUSTRE_INSTALL/setenv.sh && unset LUSTRE_INSTALL

# Install opam
RUN sudo apk add opam
RUN opam init --disable-sandboxing -a 
# RUN opam switch create 4.05.0

# Install Heptagon
RUN wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1Ru1kdpqEAKQ-BJX_QyQpbGsxy7fqpWaI' -O hepta.zip && \
    unzip hepta.zip
WORKDIR /build/heptagon-1.05.00
COPY reset.ml compiler/heptagon/trasnformation/reset.ml
RUN CHECK_IF_PREINSTALLED=false opam install -y menhir lablgtk ocamlgraph camlp4
RUN eval $(opam env) && ./configure && make && sudo make install

# Configure Zsh
RUN sudo chsh -s $(which zsh) && \
    git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions && \
    git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh/zsh-syntax-highlighting

# Setup volume directory
RUN sudo mkdir -p /volume1/ && sudo chown -R user:usergroup /volume1/

# Copy config files
COPY home/.zshrc /home/user
COPY build_run /usr/local/bin
RUN sudo chmod +x /usr/local/bin/build_run

CMD ["tail", "-f", "/dev/null"]
