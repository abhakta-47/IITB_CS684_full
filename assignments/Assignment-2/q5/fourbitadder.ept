node mxor(x, y: bool) returns (c: bool)
let 
    c = (x and not y) or ((not x) and y);
tel

node fa(x, y, cin: bool) returns (z, cout: bool)
let 
    z = mxor(mxor(cin, x), y); 
    cout = if cin then (x or y) else (x and y); 
tel

node rippleadd<<n:int>>(a: bool^n; b: bool^n) returns (c: bool^n; over: bool)
let
    (c,over) = mapfold<<n>>fa(a, b, false);
tel

node display(a0, a1, a2, a3: bool; b0, b1, b2, b3: bool) returns (c0, c1, c2, c3: bool; overflow: bool)
var a, b, c: bool^4;
let
    a = [a0, a1, a2, a3]; b = [b0, b1, b2, b3];
    (c,overflow) = rippleadd<<4>>(a,b);
    c0 = c[0]; c1 = c[1]; c2 = c[2]; c3 = c[3];
tel

